전위 운행 (PreOrder) => Root, Left, Right 순서
중위 운행 (InOrder) => Left, Root, Right 순서
후위 운행 (PostOrder) => Left, Right, Root 순서

-----------------------------------------------------------------------------------------------------

트랜잭션의 특성
- 원자성(Atomicity) : 완전하게 수행 완료되지 않으면 전혀 수행되지 않아야 함
- 일관성(Consistency) : 시스템의 고정 요소는 트랜잭션 수행 전후에 같아야 함
- 격리성(Isolation, 고립성) : 트랜잭션 실행 시 다른 트랜잭션의 간섭을 받지 않아야 함
- 영속성(Durability, 지속성) : 트랜잭션의 완료 결과가 데이터베이스에 영구히 기억됨
 
-----------------------------------------------------------------------------------------------------
 
* DML
   1. SELECT : 테이블에서 조건에 맞는 튜플 검색
   2. INSERT : 테이블에 새로운 튜플 삽입
   3. UPDATE : 테이블에서 조건에 맞는 튜플의 내용 갱신
   4. DELETE : 테이블에서 조건에 맞는 튜플 삭제
* DCL
   1. COMMIT : 명령에 의해 수행된 결과를 실제 물리적 디스크로 저장하고, 데이터베이스 조작 작업이 정상적으로 완료 됐음을 알려주는 명령어
   2. ROLLBACK : 아직 COMMIT 되지 않은 변경된 모든내용 들을 취소하고 , 데이터베이스를 이전 상태로 되돌리는 명령어
   3. GRANT : 데이터베이스 사용자에게 사용 권한 부여
   4. REVOKE : 데이터베이스 사용자의 사용 권한 취소
 
-----------------------------------------------------------------------------------------------------
 
Super key(슈퍼키) - 속성들의 집합으로 구성된 키, 릴레이션을 구성하는 모든 튜플들 중 슈퍼키로 구성된 속성의 집합과 동일한 값은 나타나지 않는다.
Candidate key(후보키) - 튜플을 유일하게 식별하기 위해 사용하는 속성들의 부분집합
 
-----------------------------------------------------------------------------------------------------
 
기본키 - 후보키 중에서 선정된 주키(MAIN KEY)로 중복된 값을 가질 수 없다.
- 한 릴레이션에서 특정 튜플을 유일하게 구별할 수 있는 속성
- 기본키는 후보키의 성질을 갖는다. 즉 튜플을 식별하기 위해 반드시 필요한 키
- 기본키는 NULL 값을 가질 수 없다. 즉 기본키로 설정된 속성에는 NULL값이 있어서는 안된다.
 
-----------------------------------------------------------------------------------------------------
 
데이터 모델의 구성 요소
- 구조(Structure):논리적인 개체 타입들 간의 관계, 데이터 구조 및 정적 성질을 표현
- 연산(Operation):실제 데이터를 처리하는 작업에 대한 명세로, 조작하는 기본 도구
- 제약 조건(Constraint):DB에 저장될 수 있는 실제 데이터의 논리적인 제약 조건
[해설작성자 : 제발 한번에 합격하고 싶어욤]

데이터 모델링의 구성요소
- 논리적구조(Relation)
- 연산(Operation)
- 제약조건(Constraint)
논리 데이터 모델의 구성요소
- 개체
- 속성
- 관계
 
-----------------------------------------------------------------------------------------------------
 
# C언어 연산자에서는 0이 아닌 모든값은 1(TRUE)로 본다.
 
-----------------------------------------------------------------------------------------------------
 
Header Length는 IP 프로토콜의 헤더 길이를 32비트 워드 단위로 표시한다.
Total Packet Length (16 bits): IP 헤더 및 데이터를 포함한 IP 패킷 전체 길이를 바이트 단위로 길이를 표시. (최대값은 65,535 = 2^16 - 1)
Time To Live는 송신 호스트가 패킷을 전송하기 전 네트워크에서 생존할 수 있는 시간을 지정한 것이다.
Version Number는 IP 프로토콜의 버전번호를 나타낸다.
 
-----------------------------------------------------------------------------------------------------
 
응집도 : 모듈이 독립적인 기능으로 정의되어 있는 정도를 의미한다. - 기순교절시논우

-  (강함) 기능적 응집도 > 순차적 응집도 > 교환적 응집도 > 절차적 응집도 > 시간적 응집도 > 논리적 응집도 > 우연적 응집도 (약함)

응집도 : 하나의 모듈이 하나의 기능을 수행하는 요소들간의 연관성 척도, 독립적인 모듈이 되기 위해서는 응집도가 강해야 한다.(결합도는 약해야 한다.)


결합도: 모듈과 모듈 사이의 상호의존 또는 연관 정도를 의미한다.

스탬프 결합도 - 두 모듈이 매개변수로 자료를 전달할 때, 자료구조 형태로 전달되어 이용될 때 데이터가 결합되어 있다고 한다.
내용 결합도 - 하나의 모듈이 직접적으로 다른 모듈의 내용을 참조할 때 두 모듈은 내용적으로 결합되어 있다고 한다.
공통 결합도 -  두 모듈이 동일한 전역 데이터를 접근한다면 공통결합 되어 있다고 한다.
결합도 -  두 모듈간의 상호작용, 또는 의존도 정도를 나타내는 것이다
 
-----------------------------------------------------------------------------------------------------
 
or 연산 한쪽만 참이여도 1 반환 n2<=2(참) -> 1
! 부정연산자 3 부정 0 반환 -> 0
and 연산 둘다 참이여야 1반환 (n1>1) (거짓) -> 0
 
-----------------------------------------------------------------------------------------------------
 
14	22	30	38
10111213/14151617/18192021/22232425
a(0)	a(1)	a(2)	a(3)

print(a[2]) 	-> 18
print(a) 	-> 10
 
-----------------------------------------------------------------------------------------------------
 
기기를 키오스크에 갖다 대면 원하는 데이터를 바로 가져올 수 있는 기술로 10㎝ 이내 근접 거리에서 기가급 속도로 데이터 전송이 가능한 초고속 근접무선통신(NFC : Near Field Communication) 기술은?
Zing -> 근거리로 가까이 가면 지이이이잉 하고 소리가 난다고 외우세요 (ㅋㅋ)
 
-----------------------------------------------------------------------------------------------------
 
MAC (Mandatory Access Control)
- 강제 접근 통제
- 미리 정해진 자원의 보안 레벨과 사용자에게 허락된 접근 권한 비교

DAC (Discretionary Access Control)
- 임의적 접근통제
- 자원에 대한 접근을 사용자나 그룹의 신분에 따라 제한
- 자원의 소유권을 가진 사람이 다른 사람의 접근을 허용하거나 제한할 수 있음

RBAC (Role Based Access Control)
- 사용자 역할에 따른 접근 통제
- 개별적인 신분이 아니라 조직 내 그룹 / 역할에 따라 부여
 
-----------------------------------------------------------------------------------------------------
 
<cocomo 모델>
보엠이 고안한 소프트웨어 개발비용 산정 방법.
man-month = 투입 노력

개발 유형에 따른 3종류 - organic, semidetached, embedded
(기본, 중간, 내장형 모드) -> (조직형,반분리형,내장형)

COCOMO 모형
- 원시 프로그램 규모(LOC)에 의한 비용 산정 기법
- 보헴(Boehm)이 제안
- 비교적 작은 규모의 프로젝트들을 통계 분석한 결과를 반영한 모델 -> 중소 규모 소프트웨어 프로젝트 비용 추정에 적합
- 비용 산정 결과는 Man-Month로 표현

소프트웨어 개발유형에 따른 분류
  조직형(Organic)
  - 5만 라인 이하
  - 사무 처리용, 업무용, 과학용 소프트웨어 개발에 적합

  반분리형(Semi-Detached)
  - 30만 라인 이하
  - 컴파일러, 인터프리터 개발에 적합

  내장형(Embedded)
  - 30만 라인 이상
  - 미사일 유도 시스템, 실시간 처리 시스템 개발에 적합
 
-----------------------------------------------------------------------------------------------------
 
NFS(Network File System) : 네트워크상에서 공유되는 파일시스템. 다른 원격 호스트의 파일 시스템을 로컬 디스크에 접근하듯 간단하게 접근하여 자신의 디렉토리처럼 사용할 수 있다

Network Mapper : 네트워크 보안을 위한 유틸리티. 네트워크의 보안을 위해 물리적 연결과 어떤 서버와 운영 체제가 작동 중인지 따위를 조사하는 응용 프로그램

AOE Network(Activity On Edge Network) : 어떤 프로젝트를 마치기까지 수행되는 작업의 각 단계(상태)를 그래프의 정점(Vertex)으로 표현하고, 작업 하나가 완료되어 다음 단계로 넘어가는 시간을 그래프의 간선(Edge)으로 나타낸 방향 그래프
 
-----------------------------------------------------------------------------------------------------
 
클래스는 공통 속성을 공유하는 객체들의 집합이다.
 
-----------------------------------------------------------------------------------------------------
 
생성패턴 : 객체를 생성하는 것에 대한 패턴
- 추상 팩토리 패턴(abstract factory), 빌더 패턴(builder), 팩토리 메소드 패턴(factory method), 프로토타입 패턴(prototype), 싱글톤 패턴(singleton)

구조패턴 : 구조를 통해 확장성을 꾀하는 패턴
- 어댑터 패턴(adapter), 브릿지 패턴(bridge), 컴포지트 패턴(composite), 데코레이터 패턴(decorator), 퍼사드 패턴(facade), 플라이웨잇 패턴(flysweight), 프록시 패턴(proxy)

행위 패턴 : 행위의 변경, 수정 등을 위한 패턴
- 역할 사슬 패턴(책임 연쇄, chain of reposibility), 커맨드 패턴(command), 인터프리터 패턴(interpreter), 이터레이터 패턴(반복자, iterator), 미디에이터 패턴(중재자, mediator), 메멘토 패턴(memento), 옵저버 패턴(observer), 상태 패턴(state), 전략 패턴(strategy), 템플릿 메소드 패턴(template method), 비지터 패턴(방문자, visitor)
 
-----------------------------------------------------------------------------------------------------
 
DRM(Digital Right Management)
- 디지털 콘텐트의 지적재산권보호, 관리 기능 및 안전한 유통과 배포를 보장하는 솔루션이다.
- 디지털 콘텐트의 지적재산권을 보호하는 권한통제기술, 사용권한제어 기술, 패키징 기술, 라이선스 관리를 포함한 유통체계이다.
- 디지털 콘텐츠와 디바이스의 사용을 제한하기 위해 하드웨어 제조업자, 저작권자, 출판업자 등이 사용할 수 있는 접근 제어 기술을 의미한다.
 
-----------------------------------------------------------------------------------------------------
 
RCS(Revision Control System)
- CVS와의 차이점은 소스 파일의 수정을 한 사람만으로 제한한다.
- 다수의 사용자가 동시에 파일 수정을 할 수 없도록 파일 잠금 방식으로 버전을 관리하는 도구이다.
- 다른 방향으로 진행된 개발 결과를 합치거나 변경 내용을 추적할 수 있다.
[해설작성자 : 두목넷]

RPC(Remote Procedure call)
- 별도의 원격 제어를 위한 코딩 없이 다른 주소 공간에서 리모트의 함수나 프로시저를 실행 할 수 있게 해주는 프로세스간 통신
 
-----------------------------------------------------------------------------------------------------
 
버블 정렬은 첫위치부터 시작해서 오른쪽값과 비교
PASS 1 첫 버블 정렬이 끝난상태
96 비교 -> 69735 -> 97비교 -> 67935 -> 93비교 -> 67395 -> 95비교 -> 67359
 
-----------------------------------------------------------------------------------------------------
 
Refactoring - 코드의 구조 재조정
Architecting - 설계관련
Specification - 명세서
Renewal - 유지보수
 
-----------------------------------------------------------------------------------------------------
 
Stack = LIFO, 한 쪽 끝에서 일어남
Queue = FIFO, 양방향에서 일어남
Tree & Graph 는 비선형구조
 
-----------------------------------------------------------------------------------------------------
 
정규화 과정 [도부이결다조]
- 1NF : 모든 *도*메인이 원자 값으로만 구성
- 2NF : 기본키가 아닌 속성이 기본키에 대한 완전 함수적 종속을 만족, *부*분적 함수 종속을 제거한 정규형
- 3NF : 기본키가 아닌 모든 속성이 기본키에 대해 *이*행적 함수 종속 관계를 만족하지 않는 정규형
- BCNF : 모든 *결*정자가 후보키인 정규형, 종속성 보존X
- 4NF : *다*치 종속이 성립하는 경우, R의 모든 속성이 A에 함수적 종속 관계를 만족
- 5NF : 모든 *조*인 종속이 R의 후보키를 통해서만 성립되는 정규형
 
-----------------------------------------------------------------------------------------------------
 
DDL
- CREATE : SCHEMA(스키마), DOMAIN(도메인), TABLE(테이블), VIEW(뷰), INDEX(인덱스)를 정의
- ALTER : TABLE에 대한 정의를 변경하는 데 사용
- DROP : SCHEMA(스키마), DOMAIN(도메인), TABLE(테이블), VIEW(뷰), INDEX(인덱스)를 삭제
DML
- SELECT : 테이블에서 조건에 맞는 튜플을 검색
- INSERT : 테이블에 새로운 튜플을 삽입
- DELETE : 테이블에서 조건에 맞는 튜플을 삭제
- UPDATE : 테이블에서 조건에 맞는 튜플의 내용 변경
 
-----------------------------------------------------------------------------------------------------
 
차수(Degree) : 속성의 수
카디널리티(Cardinality) : 튜플의 수 (기수)
 
-----------------------------------------------------------------------------------------------------
 
리스트 타입 : 가변형
튜플 타입 : 불변형
 
-----------------------------------------------------------------------------------------------------
 
정보보안 3요소 : 기밀성, 무결성, 가용성 (기무가)

 
-----------------------------------------------------------------------------------------------------
 
Worm : 악성코드의 유형 중 다른 컴퓨터의 취약점을 이용하여 스스로 전파하거나 메일로 전파되며 스스로를 증식하는 것
Rogue Ware(Rogue security software; 가짜 백신 소프트웨어) : 사용자가 컴퓨터에 바이러스가 있다고 잘못 믿게 하고 컴퓨터에 실제로 악성 프로그램을 설치토록 하거나, 가짜 악성 프로그램 제거 도구에 대한 비용을 지불하도록 설득함. 공포심을 통해 사용자를 조종
Adware : 특정 소프트웨어를 실행할 때 또는 자동으로 활성화되는 광고프로그램으로 이 자체는 악성코드로 보기는 힘들지만, 무분별한 광고 팝업을 뜨게 하는 등의 악용 위험성으로 악성코드로 분류되기도 함.
Reflection Attack(반사공격) : 송신자가 생성한 메시지를 가로챈 공격자가 그 메시지를 다시 송신자에게 재전송하여 접근 권한을 얻는 형태의 공격 방법.
 
-----------------------------------------------------------------------------------------------------
 
Ping of death : ICMP가 패킷을 많이 쏘니 핑 하고 죽어삣네. 핑 오브 데스

Session Hijacking(세션 가로채기) : 컴퓨터 시스템의 정보나 서비스에 무단으로 접근하기 위해 유효한 컴퓨터 세션(세션 키라고도 함)을 이용하는 것 일반적인 예로 두 컴퓨터 간에 활성화된 상태(즉, 로그인된 상태)에서 공격자가 피공격자의 로그인 정보를 활용하여 자신에게 필요한 행위를 하는 것을 뜻한다.

Piggyback Attack(피그백 공격) : 공격자가 다른 사용자의 연결에서 계정을 사용하지 않는 비활성 기간(비활성 간격)을 이용하여 시스템에 액세스(접근)한다. 이는 간선(회선 간) 공격이라고도 불린다.
-> 쉽게 설명하자면, 시스템에 대한 합법적인 권한을 가진 사용자가 시스템에 접근할 때, 활성화된 기간(직접 로그인 인증을 받아야 하는 상황)에는 접근 권한이 없는 공격자가 비활성화된 기간(합법적 사용자가 시스템에 접근 인증을 받은 상황)에 마치 사용자와 관련있는 사람인 듯이 태그를 붙여 몰래 뒤따라 들어가는 것이라 할 수 있다.

XSS (크로스 사이트 스크립팅) : 웹사이트에 악성 스크립트를 주입하는 행위. 공격자가 상대방의 브라우저에 스크립트가 실행되도록 해 사용자의 세션을 가로채거나, 웹사이트를 변조하거나, 악의적 콘텐츠를 삽입하거나, 피싱 공격을 진행하는 것.
 
-----------------------------------------------------------------------------------------------------
 
두 명의 개발자가 5개월에 걸쳐 10000 라인의 코드를 개발하였을 때, 월별(man-month) 생산성 측정을 위한 계산 방식으로 가장 적합한 것은?

노력 측정 = 개발기간 X 투입인원
개발비용 측정 = 개발기간 X 투입인원 x 단위비용
개발기간 측정 = 예측된 LOC(라인) / (투입인원 X 1인당 월평균 LOC)
생산성 측정 = 개발된 LOC / (투입인원 X 개발기간)			10000/(5x2)
 
-----------------------------------------------------------------------------------------------------
 
1. 하향식 통합 테스트 ( Top Down Integration Test )
  a. 깊이 우선 통합법, 넓이 우선 통합법 사용
  b. 테스트 초기 부터 사용자에게 시스템 구조 보여줄 수 있다.
  c. 상위 모듈에서는 tc를 사용하기 어렵다.
  d. 상위 모듈에서 하위 모듈 방향으로 통합하면서 테스트하는 기법
  e. 절차
    - 주요 제어 모듈은 작성된 프로그램을 사용하고, 주요 제어 모듈의 종속 모듈들은 스텁 ( stub )로 대체 한다.
    - 깊이우선 or 넓이 우선 등의 통합방식에 따라, 하위 모듈인 스텁들이 한 번에 하나씩 실제모듈로 교체된다.
    - 모듈이 통합될 때마다 테스트 실시
    - 새로운 오류가 발생하지 않음을 보증 하기 위해 회귀 테스트 실시

2. 상향식 통합 테스트 ( Bottom Up Integration Test )
  a. 하위 모듈에서 상위 모듈 방향으로 통합하면서 테스트 하는 방법
  b. 가장 하위 단계의 모듈부터 통합 및 테스트가 수행되므로 스텁은 필요하지 않다.
  c. 하나의 주요 제어 모듈과 관련된 종속 모듈의 그룹인 클러스터( cluster )는 필요하다.
  d. 절차
    - 하위 모듈을 클러스터로 결합
    - 상위 모듈에서 데이터의 입출력을 확인하기 위해, 모듈인 드라이버 작성
    - 통합된 클러스터 단위로 테스터
   - 테스트가 완료되면 클러스터는 프로그램 구조의 상위로 이동 하여 결합하고, 드라이버는 실제 모듈로 대체
 
-----------------------------------------------------------------------------------------------------
 
스프린트
- 실제 개발을 2~4주간 진행하는 과정
- 스프린트 백로그에 작성된 Task를 대상으로 작업 시간을 측정한 후 담당 개발 자에게 할당합니다.
- Task는 할 일, 진행 중, 완료의 상태로 구성된다.
 
-----------------------------------------------------------------------------------------------------
 
단일 책임원칙 : 하나의 객체는 하나의 동작만의 책임을 가짐
개방-폐쇄의 원칙 : 클래스는 확장에 대해 열려 있어야 하며 변경에 대해 닫혀 있어야 한다.
리스코프 교체의 원칙 : 특정 메소드가 상위 타입을 인자로 사용할 때, 그 타입의 하위 타입도 문제 없이 작동해야 함
의존관계 역전의 원칙 : 상위 계층이 하위 계층에 의존하는 전통적인 의존관계를 반전(역전)시킴으로써 상위 계층이 하위 계층의 구현으로부터 독립되게 할 수 있음
 
-----------------------------------------------------------------------------------------------------
 
생성패턴
- 추상팩토리(Abstract Factory)
- 빌더(Builder)
- 팩토리메서드(FactoryMethod)
- 프로토타입(Prototype)
- 싱글톤(Singleton)

구조패턴
- 어댑터(Adapter)
- 브리지(Bridge)
- 컴포지트(Composite)
- 데코레이터(Decorator)
- 파사드(Facade)
- 플라이웨이트(Flyweight)
- 프록시(Proxy)

행위패턴
- 책임 연쇄(Chain of Responsibility)
- 커맨드(Command)
- 인터프리터(InterPreter)
- 이터레이터(Iterator)
- 중재자(Mediator)
- 메멘토(Memento)
- 옵서버(Observer)
- 상태(State)
- 전략(Strategy)
- 템플릿메서드(Template Method)
- 방문자(Visitor)
 
-----------------------------------------------------------------------------------------------------
 
EAI(Enterprise Application Integration): 기업 응용 프로그램 통합으로 기업용 응용 프로그램의 구조적 통합 방안을 가리킴
FEP(Front-End Processor): 입력되는 데이터를 컴퓨터의 프로세서가 처리하기 전에 미리 처리하여 프로세서가 차지하는 시간을 줄여주는 프로그램이나 하드웨어
GPL(General Public License): 자유 소프트웨어 재단(OSF)에서 만든 자유 소프트웨어 라이선스
Duplexing: 이중화(데이터베이스의 회복 기법 중 가장 간단한 것)
 
-----------------------------------------------------------------------------------------------------
 
1. 연관 관계(Association Relationship)
2. 의존 관계(Dependency Relationship)
3. 실체화 관계(Realization Relationship)
4. 일반화 관계(Generalization Relationship)
 
-----------------------------------------------------------------------------------------------------
 
소프트웨어 설계에 사용되는 대표적인 3가지 추상화 기법
-제어 추상화: 제어의 정확한 메커니즘을 정의하지 않고 원하는 효과를 정하는데 이용하는 방법
-기능 추상화: 입력 자료를 출력자료로 변환하는 과정을 추상화하는 방법
-자료 추상화: 자료와 자료에 적용될 수 있는 기능을 함께 정의함으로써 자료 객체를 구성하는 방법

추상화(Abstraction) : 문제의 전체적이고 포괄적인 개념을 설계한 후 차례로 세분화하여 구체화시켜 나가는 것.
- 과정추상화 : 자세한 수행 과정을 정의하지 않고, 전반적인 흐름만 파악할 수 있게 설계하는 방법
- 데이터 추상화 : 데이터의 세부적인 속성이나 용도를 정의하지 않고, 데이터 구조를 대표할 수 있는 표현으로 대체하는 방법
  
-----------------------------------------------------------------------------------------------------
 
기능적 요구사항
- 시스템이 수행해야 하는 행위들을 구체화 한 것
- 시스템에서 제공해야 할 기능을 정의한 것
- 입력기능, 출력기능, 데이터베이스 기능, 통신 기능 등

비기능적 요구사항
- 시스템이 가져야 하는 기능 이외의 요구사항
- 시스템의 전체적인 품질이나 고려해야 하는 제약사항 등
- 사용 용이성, 효율성, 신뢰성, 이식성, 유연성, 확장성 등
- 성능적인 면: 응답 속도, 자원 사용량 등
- 보안 측면: 침입 대응, 침입 탐지, 사용자 인증, 권한 부여 등
 
-----------------------------------------------------------------------------------------------------
  
마스터 - 슬레이브 패턴 (Master-slave pattern)
마스터: 작업을 분리, 배포
슬레이브: 요청 작업 처리

슬레이브는 마스터의 작업 요청을 처리하고, 처리된 결과를 되돌려준다.
마스터는 슬레이브가 반환한 결과값으로부터 최종 결과값을 계산한다	
 
-----------------------------------------------------------------------------------------------------
 
애자일(Agile) 방법론 정의
- 요구사항, 설계, 구현, 시험의 단계를 통해 개발하는 방법론
- SW 개발 단계의 변화에 신속하게 대응하기 위해 요구사항을 지속적으로 분석하고 반영하여 시간 지연을 최소화하는 방법론

애자일(Agile) 방법론 특징
- 반복적인 개발을 통한 잦은 출시를 목표로 함
- 기존모형(폭포수, 프로토타입, 나선형)의 문제점을 보완한 모형
- 소프트웨어를 점증적으로 개발
- 출시 주기를 짧게 하여 다양한 요구 변화에 대응
- 가볍고 실용적인 소프트웨어 개발 방법론
 
-----------------------------------------------------------------------------------------------------
 
럼바우 분석기법
객,동,기
객체모델링 = 객체 다이어그램
동적모델링 = 상태 다이어그램
기능 모델링 = 자료흐름도

문제를 잘 읽으셔야합니다..
객동기만 기억하고 있다가 정적 모델링 해서 정답률이 낮은거같은데
객체 = 객체   객2
동적 = 상태   동상
기능 = 자료~  기자
로 외우면 편해요

(다음 설명에 이 "단어"가 있으면 해당 "모델링"이 정답)
객체 모델링 : 정보 모델링, 시스템에서 요구
동적 모델링 : 제어, 흐름, 동작
기능 모델링 : DFD
 
-----------------------------------------------------------------------------------------------------
 
미들웨어 : 복잡한 이기종 환경에서 응용 프로그램과 운영환경 간에 원만한 통신을 이룰 수 있게 해주는 소프트웨어
        -> 애플리케이션 - 사용자 사이 외에도 프로그램과 환경간에서 서비스를 제공
 
-----------------------------------------------------------------------------------------------------
 
깊이 우선 탐색(Depth First Search)는 이름 그대로 최대한 깊이 탐색한 이후 더이상 탐색할 것이 없다면 그 이전으로 돌아가 탐색을 이어가는 것입니다. 탐색을 하고 있는 분기에서 완벽하게 탐색을 한 이후 다른 분기를 탐색하는 방법입니다.
고로 A-B-E-F-G까지 탐색한 이후 더이상 탐색할 것이 없기 때문에 이전으로 돌아가 C-D를 마저 탐색해줍니다.
 
-----------------------------------------------------------------------------------------------------
 
Overflow(오버플로우) : 스택 공간이 가득찼을 때 하나의 데이터를 더 넣으려고 하는 경우, 스택 오버플로우가 일어나고 프로그램에 오류 야기

Underflow(언더플로우) : 스택 공간에 데이터가 없는데 프로그램에서 스택에서 데이터를 꺼내려고 하는 경우, 스택 언더플로우가 일어나며 프로그램에 오류를 야기
 
-----------------------------------------------------------------------------------------------------
 
결함(fault)이란 오류 및 작동 실패의 원인으로서 소프트웨어 개발자의 설계와 다르게 동작하거나 제작 의도와 다른 결과가 발생하는 것을 말합니다.
실수/실책(mistake)이란 사람이 저지른 잘못된 판단이나 결심을 주로 가리킨다고 합니다.
 
-----------------------------------------------------------------------------------------------------
 
이식성(Portability): 다양한 하드웨어 환경에서도 운용 가능하도록 쉽게 수정될 수 있는 능력
효율성(Efficiency): 최소의 작업으로 요구되는 기능을 수행하는 정도
사용 용이성(Usability): 소프트웨어를 쉽게 사용할 수 있는 정도
정확성(Correctness): 사용자의 요구사항을 충족시키는 정도
 
-----------------------------------------------------------------------------------------------------
 
두 테이블 곱집합
두 개의 테이블은 카티션 프로덕트 후 튜플의 수는 각 테이블의 곱,
컬럼은 각 테이블의 컬럼을 더한 것 과 같다.
 
-----------------------------------------------------------------------------------------------------
 
개체 무결성 : 기본키는 null 값이 될 수 없음
참조 무결성 : 외래키는 참조할 수 없는 값을 가질 수 없음
도메인 무결성 : 특정 속성값은 그 속성이 정의된 도메인에 속한 값이어야 함
 
-----------------------------------------------------------------------------------------------------
 
HAVING 절 : GROUP BY와 함께 사용되며, 그룹에 대한 조건을 지정한다
 
-----------------------------------------------------------------------------------------------------
 
관계 대수 연산에는
1. Select
2. Project
3. Join
4. Division 이 있다.
 
-----------------------------------------------------------------------------------------------------
 
슈퍼키 : 유일성을 만족하는 속성 또는 속성들의 집합
후보키 : 유일성과 최소성을 만족하는 속성 또는 속성들의 집합
대체키 : 기본키로 선택되지 못한 후보키
외래키 : 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합

기본키(Primary key)
 - 기본키는 후보키 중에서 특별히 선정된 주키(Main Key)이며 한 릴레이션에서 특정 튜플을 유일하게 구별할 수 있는 속성이다.
 - 기본키는 중복된 값을 가질 수 없으며 NULL값을 가질 수 없다.

대체키(Alternate Key)
 - 대체키는 후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키를 의미한다. 대체키를 보조키라고도 한다.

슈퍼키(Super Key)
 - 슈퍼키는 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키를 말한다. 릴레이션을 구성하는 모든 튜플 중 슈퍼키로 구성된 속성의 집합과 동일한 값은 나타내지 않는다.
 - 슈퍼키는 릴레이션을 구성하는 모든 튜플에 대해 유일성은 만족하지만, 최소성은 만족하지 못한다.

외래키(Foreign Key)
 - 외래키는 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합을 의미한다.
 - 한 릴레이션에 속한 속성 A와 참조 릴레이션의 기본키인 B가 동일한 도메인상에서 정의되었을 때의 속성 A를 외래키라고 한다.
 - 외래키로 지정되면 참조 릴레이션의 기본키에 없는 값은 입력할 수 없다.
 
-----------------------------------------------------------------------------------------------------
 
관계대수 : 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어이다.
비절차적 특성은 관계해석이 지니고 있다.
 
-----------------------------------------------------------------------------------------------------
 
Atomicity(원자성)
1. 트랜잭션의 연산은 데이터베이스에 모두 반영되든지 아니면 전혀 반영되지 않아야 한다.
2. 트랜잭션 내의 모든 명령은 반드시 완벽히 수행되어야 하며, 모두가 완벽히 수행되지 않고 어느하나라도 오류가 발생하면 트랜잭션 전부가 취소되어야 한다.

Consistency(일관성)
1. 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환한다.
2. 시스템이 가지고 있는 고정요소는 트랜잭션 수행 전과 트랜잭션 수행 완료 후의 상태가 같아야 한다.

Isolation(독립성,격리성)
1. 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행중에 다른 트랜잭션의 연산이 끼어들 수 없다.
2. 수행중인 트랜잭션은 완전히 완료될 때까지 다른 트랜잭션에서 수행 결과를 참조할 수 없다.

Durablility(영속성,지속성)
1. 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 한다.
 
-----------------------------------------------------------------------------------------------------
 
로킹기법 : 같은 자원을 엑세스하는 다중 트랜잭션 환경에서 DB의 일관성과 무결성을 유지하기 위해 트랜젝션의 순차적 진행을 보장하는 직렬화 기법.
타임스탬프 기법 : 트랜젝션과 트랜잭션이 읽거나 갱신한 데이터에 대해 트랜잭션이 실행을 시작하기 전에 타임스탬프를 부여하여 부여된 시간에 따라 트랜젝션 작업을 수행하여 트랜잭션 간의 처리순서를 미리 정하는 기법
 
-----------------------------------------------------------------------------------------------------
 
Temporal Cohension(시간적 응집도)를 설명하는 문제이다.

- Logical Cohension(논리적 응집도): 모듈 내 구성 요소들이 같은 범주에 속하는 기능끼리 묶인 경우(ex. 새글, 불러오기, 저장하기, 다른이름으로 저장하기)
- Coincidental Cohension(우연적 응집도): 모듈 내 구성 요소들이 뚜렷한 관계없이 묶인 경우
- Sequential Cohension(순차적 응집도): 모듈 내 구성 요소들이 이전의 명령어로부터 나온 출력결과를 그 다음 명령어의 입력자료로 사용하는 경우(ex. 총점과 평균의 관계)
 
-----------------------------------------------------------------------------------------------------
 
JAVA 우선순위
-- > % > & > =
 
-----------------------------------------------------------------------------------------------------
 
사용자가 요청한 디스크 입·출력 내용이 다음과 같은 순서로 큐에 들어 있을 때 SSTF 스케쥴링을 사용한 경우의 처리 순서는? (단, 현재 헤드 위치는 53 이고, 제일 안쪽이 1번, 바깥쪽이 200번 트랙이다.)
98-183-37-122-14-124-65-67

SSTF : shortest seek time first
현재 헤드위치에서 가장 가까운 것부터..
현재 헤드위치가 53이므로 65가 가장 가깝고( 차이 12) 다른것도 동일한 방법으로 해결.
[해설작성자 : 귀살대]

가장 가까운 것 => 가장 이동 거리가 짧은 것 => 현재 트랙과 남아있는 트랙 중 차이가 적은 것  

53 - 65 - 67 - 37 - 14 - 98 - 122 - 124 - 183
   12   2    30   23   84   24    2     59
 
-----------------------------------------------------------------------------------------------------
 
192.168.1.0/24 네트워크를 FLSM 방식을 이용하여 4개의 Subnet으로 나누고 IP Subnet-zero를 적용했다. 이 때 Subnetting 된 네트워크 중 4번째 네트워크의 4번째 사용가능한 IP는 무엇인가?


CIDR 표기법으로 ipv4 32비트중 앞 24비트가 네트워크ip, 뒤 8비트가 호스트ip가 됩니다.
여기서 4개의 서브넷으로 나누려면 호스트ip의 앞쪽 비트를 가능한 적게 4개까지 나누어줘야 하는데요
2진수에서 4개로 나누려면 2비트를 사용해야 하므로
192.168.1.(00)000000 (0)
192.168.1.(01)000000 (64)
192.168.1.(10)000000 (128)
192.168.1.(11)000000 (192)
로 나눌 수 있습니다.
여기서 IP subnet-zero를 적용했다는것은
호스트ip가 전부 0인 192.168.1.0 도 사용하겠단것을 의미 합니다.
즉 4번째 네트워크는 192.168.1.192가 되겠죠?
단 각 서브넷에서 호스트ip가 전부 0인 주소와 전부 1인 주소는 다른 용도로 이미 예약이 되어있습니다.(0은 네트워크 자체의 주소, 1은 브로드캐스팅 주소)
즉 여기서 4번째 사용가능한 ip는
193,194,195,196←이게 되는거죠
 
-----------------------------------------------------------------------------------------------------
 
A class에 속하는 ip 주소 범위: 0.0.0.0 ~ 127.255.255.255
B class에 속하는 ip 주소 범위: 128.0.0.0 ~ 191.255.255.255
C class에 속하는 ip 주소 범위: 192.0.0.0 ~ 223.255.255.255

D class와 E class는 각각 멀티캐스트용, 연구용으로 사용됩니다.
D class ip 주소 범위: 224.0.0.0 ~ 239.255.255.255
E class ip 주소 범위: 240.0.0.0 ~ 255.255.255.25
 
-----------------------------------------------------------------------------------------------------
 
OPT - Optimal : 앞으로 가장 오랫동안 사용되지 않을 페이지 교체
FIFO - First In First Out
LRU - Least Recently Used : 가장 오랫동안 사용되지 않은 페이지 교체
LFU - Least Frequently Used : 참조 횟수가 가장 작은 페이지 교체
MFU - Most Frequently used : 참조 횟수가 가장 많은 페이지 교체
NUR - Not Used Recently : 최근에 사용하지 않은 페이지 교체
 
-----------------------------------------------------------------------------------------------------
 
타조(Tajo) : 하둡(Hadoop) 기반 데이터웨어하우스 시스템
원 세그(One Seg) : 일본과 브라질에서 상용 중인 디지털 TV 방송 기술의 일종 (주로 모바일 기기를 대상으로)
포스퀘어(Foursquare) : 위치 기반 소셜 네트워크 서비스
텐서플로(Tensorflow) : 2015년 오픈소스로 공개된 구글 브레인 팀의 두 번째 기계 학습(Machine Learning) 시스템
 
-----------------------------------------------------------------------------------------------------
 
이상탐지(Anomaly Detection) -> Behavior, Statistical Detection로 불리며 평균적 시스템의 상태 기준으로 비정상적인 행위나 자원의 사용이 감지되면 이를 알려줌
오용탐지(Misuse Detection) -> Signature Base나 Knowledge Base로 불리며 미리 입력해둔 공격 패턴이 감지되면 이를 알려줌
 
-----------------------------------------------------------------------------------------------------
 
X Display Manager Control Protocol(XDMCP) : 사용자 인증이 완료되면 X서버의 로그인 세션을 시작한다.
 
-----------------------------------------------------------------------------------------------------
 
VLAN(Virtual Local Area Network)
: 물리적 배치와 상관없이 논리적으로 LAN을 구성
Broadcast Domain을 구분할 수 있게 해주는 기술로 접속된 장비들의 성능향상 및 보안성 증대 효과

STP(Spanning Tree Protocol)
: 2개 이상의 스위치가 여러 경로로 연결될 때,
무한 루프 현상을 막기 위해서 우선순위 따라 1개의 경로로만 통신하도록 하는 프로토콜

ARP(Address Resolution Protocol)
: 네트워크 상에서 IP 주소를 물리적 네트워크 주소로 대응(bind)시키기 위해 사용되는 프로토콜,
(IP를 MAC주소로 바인딩)
 
-----------------------------------------------------------------------------------------------------
 
대칭키 암호화 - 블록 암호화 방식 : DES, SEED, AES, ARIA
개인키 암호화 - 스트림 암호화 방식 : LFSR, RC4
공개키 암호화(비대칭 암호) : RSA
 
-----------------------------------------------------------------------------------------------------
 
Organic: 5만 라인 이하의 프로젝트에 적합, 소규모 팀이 개발에 사용
Semidetached: 30만 라인 이하의 프로젝트에 적합, 트랜잭션 처리시스템 등
Embeded: 30만 라인 이상의 프로젝트에 적합, 하드웨어가 포함된 실스간 시스템 등

♠ SW 비용 추정 모형 (수학적 산정 기법) ♠
- COCOMO 모델 : LOC( Line of Code ) 기반 비용 산정 방식
   └ Embeded : 초대형 규모의 시스템 소프트웨어를 대상, 30만 라인 이상의 sw개발에 적합
   └ Organic : 기관 내부의 중소 규모 sw대상, 5만 라인 이하 소프트웨어 개발에 적합
   └ Semi-Detached : Organic과 Embeded의 중간 단계, 30만 라인 이하
- Putnam 모델 : Rayleigh-Norden 곡선의 노력 분포도를 이용한 비용 산정 기법
- 기능 점수 모델 : 기능 점수를 산출하여 비용 산정
 
-----------------------------------------------------------------------------------------------------
 
폭포수 모형
Boehm이 제시한 고전적 생명주기 모형으로서 선형 순차적 모델 또는 고전적 생명주기 모형이라고도 하며,
[ 분석 -> 설계 -> 구현 -> 테스트 -> 유지보수 ]의 단계를 통해 소프트웨어를 개발하는 모형
가장 오래된 모형으로 많은 적용 사례가 있지만 요구사항의 변경이 어려우며,
각 단계의 결과가 확인 되어야지만 다음 단계로 넘어간다.

프토토타입 모형
발주자나 개발자 모두에게 공동의 참조 모델을 제공하여
사용자의 요구사항을 충분히 분석할 목적으로 시스템의 일부분 또는 시제품을 일시적으로 간결히 구현하여 요구사항을 반영하는 개발 모델
유지보수가 없어지고 개발 단계안에서 유지보수가 이루어진다고도 볼 수 있다.]

COCOMO 모델 : SW 비용 추정 모형
나선형 모델 (spiral model) : 폭포수 프로토타입의 장점에 위험 분석 기능을 추가, 여러번의 개발 과정을 거쳐 점진적으로 완벽한 SW를 개발하는 것.
 
-----------------------------------------------------------------------------------------------------
 
ICMP(Internet Control Message Protocol)
- IP 동작에서 네트워크 진단이나 제어 목적으로 사용

ICMP Flooding
- 서비스 거부DoS 공격의 한 방법으로 사용
- 보통 스머프 공격(Smurf Attack)이라고 부름
- 공격 방법에는 "Ping Flooding"과 "SYN Flooding"이 있음

Ping Flooding
- 공격대상에 막대한 양의 ICMP 에코 요청 패킷(ping)을 보내는 방법
- 보내는 쪽의 네트워크 대역폭이 대상 시스템이 확보한 네트워크 대역폭보다 더 크면 됨

SYN Flooding
- 막대한 양의 TCP SYN 패킷을 대상 시스템으로 보내서 시스템을 마비 시키는 공격 방법
 
-----------------------------------------------------------------------------------------------------
 
시스템 인증
- 토큰 기반 인증 : 하드웨어와 소프트웨어의 토큰 장치를 사용하는 인증 기법, 하드웨어 장치는 스마트카드를 사용, 소프트웨어 장치는 개인 식별번호를 사용하는 강력한 인증 방법
- SSO 인증 : 여러 시스템 중 하나의 시스템에 인증을 성공하면 다른 시스템의 접근 권한도 모두 얻는 방식
 
-----------------------------------------------------------------------------------------------------
 
Hash와 Encryption 차이
- Hash : 단방향, 복호화 불가능
- Encryption : 양방향, 역으로 복호화 가능

패스워드는 보통 단방향 Hash를 기본으로 저장

문제점
같은 패스워드를 hashing하면 같은 결과값이 나타나게되고 이는 문제를 발생함

해결법
이를 위해 다른 암호 값으로 저장되도록 추가되는 값 = Salt
의미 그대로 소금친다는 뜻에서 Salt라고 불림
 
-----------------------------------------------------------------------------------------------------
 
1. Effort Per Task 기법 - (LOC기법을 보완하기위함)각 기능을 구현시키는 데 필요한 노력을 생명 주기의 각 단계별로 산정
2. 전문가 감정 기법 - 두 명이상의 전문가에게 비용 산정을 의뢰하는 기법, 개인적이고 주관적
3. 델파이 기법 - (전문가감정 기법의 주관적인 편견 보완하기위함)한명의 조정자와 여러 전문가의 의견을 종합하여 산정하는 기법
4. LOC기법 - 원시코드라인수(source line of code)의 비관치, 낙관치, 기대치를 측정 예측치 구함, 본문문제내용동일.
cf. 2&3의 경우 - 하향식 비용 산정 기법이며 1&4의 경우 상향식 비용 산정 기법이다.
 
-----------------------------------------------------------------------------------------------------
 
최악의 경우에서 검색 시간복잡도
-이진 탐색트리: O(n)
-AVL트리: O(log n)
-2-3트리: O(log 3n)
-레드 블랙 트리:  O(log n)
 
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
230515
정보처리기사 필기 합격
-> 230613 발표 예정
